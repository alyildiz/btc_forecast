version: '3.7'
x-airflow-common:
    &airflow-common
    image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.1.3}
    environment:
        &airflow-common-env
        AIRFLOW__CORE__EXECUTOR: CeleryExecutor
        AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
        AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
        AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
        AIRFLOW__CORE__FERNET_KEY: ''
        AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
        AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
        AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: 5 # Just to have a fast load in the front-end. Do not use it in production with those configurations.
        AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
        AIRFLOW__CORE__ENABLE_XCOM_PICKLING: 'true' # "_run_image of the DockerOperator returns now a python string, not a byte string" Ref: https://github.com/apache/airflow/issues/13487
    
    env_file:
        - .env
        - ./backend/update/.env

    volumes:
        - ./dags:/opt/airflow/dags
        - ./logs:/opt/airflow/logs
        - ./plugins:/opt/airflow/plugins
        - "/var/run/docker.sock:/var/run/docker.sock" # We will pass the Docker Deamon as a volume to allow the webserver containers start docker images. Ref: https://stackoverflow.com/q/51342810/7024760

    user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
    group_add:
        - 998
    depends_on:
        redis:
            condition: service_healthy
        postgres:
            condition: service_healthy
    
    
    

services:
    web_app:
        container_name: web_app
        build: web_app/
        volumes:
            - ./web_app/:/workdir/web_app
            - ./backend/modeling/src:/workdir/src
            - ./shared:/workdir/shared
            - ./mlflow/db:/workdir/data
            - ./mlflow/artifacts:/workdir/artifacts
        ports:
            - 8501:8501
        command: "streamlit run /workdir/web_app/server.py"
        env_file:
            - .env
            - ./web_app/.env
        
    dbmongo:
        container_name: dbmongo 
        build: 'backend/db'
        restart: always
        volumes:
            - ./backend/db/init:/docker-entrypoint-initdb.d
            - ./shared:/workdir/shared
            - ./backend/modeling/src:/workdir/src

        env_file:
            - .env
            - ./backend/db/.env
    
    update:
        container_name: update 
        build: 'backend/update'
        restart: always
        volumes:
            - ./shared:/workdir/shared
            - ./backend/modeling/src:/workdir/src
            - ./backend/update:/workdir
        env_file:
            - .env
            - ./backend/update/.env
        command: "tail -f /dev/null"
    
    modeling:
        container_name: modeling 
        build: 'backend/modeling/'
        volumes:
            - ./backend/modeling/bin:/workdir/bin
            - ./backend/modeling/src:/workdir/src
            - ./shared:/workdir/shared
            - ./mlflow/db:/workdir/data
            - ./mlflow/artifacts:/workdir/artifacts
        ports:
            - 8888:8888

        command: "jupyter notebook --allow-root --ip 0.0.0.0"
        env_file:
            - .env
            - ./backend/modeling/.env

    mlflow:
        container_name: mlflow
        build: 'mlflow/'
        volumes:
            - ./mlflow/db:/workdir/data
            - ./mlflow/artifacts:/workdir/artifacts
        ports:
            - 5000:5000
        command : "mlflow ui --host 0.0.0.0 --backend-store-uri sqlite:///data/mlflow.db --default-artifact-root /workdir/artifacts"

    postgres:
        container_name: postgres
        image: postgres:13
        environment:
            POSTGRES_USER: airflow
            POSTGRES_PASSWORD: airflow
            POSTGRES_DB: airflow
        volumes:
            - postgres-db-volume:/var/lib/postgresql/data
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "airflow"]
            interval: 5s
            retries: 5
        restart: always

    redis:
        container_name: redis
        image: redis:latest
        ports:
            - 6379:6379
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 5s
            timeout: 30s
            retries: 50
        restart: always

    airflow-webserver:
        container_name: airflow-webserver
        <<: *airflow-common
        command: webserver
        ports:
            - 8080:8080
        healthcheck:
            test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
            interval: 10s
            timeout: 10s
            retries: 5
        restart: always

    airflow-scheduler:
        container_name: airflow-scheduler
        <<: *airflow-common
        command: scheduler
        restart: always

    airflow-worker:
        container_name: airflow-worker
        <<: *airflow-common
        command: celery worker
        restart: always

    airflow-init:
        container_name: airflow-init
        <<: *airflow-common
        command: version
        environment:
            <<: *airflow-common-env
            _AIRFLOW_DB_UPGRADE: 'true'
            _AIRFLOW_WWW_USER_CREATE: 'true'
            _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
            _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}

    flower:
        container_name: flower
        <<: *airflow-common
        command: celery flower
        ports:
            - 5555:5555
        healthcheck:
            test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
            interval: 10s
            timeout: 10s
            retries: 5
        restart: always

volumes:
    postgres-db-volume: